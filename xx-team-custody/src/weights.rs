// This file is part of Substrate.

// Copyright (C) 2021 Parity Technologies (UK) Ltd.
// SPDX-License-Identifier: Apache-2.0

// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
// http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

//! Autogenerated weights for xx_team_custody
//!
//! THIS FILE WAS AUTO-GENERATED USING THE SUBSTRATE BENCHMARK CLI VERSION 4.0.0-dev
//! DATE: 2021-09-13, STEPS: `50`, REPEAT: 20, LOW RANGE: `[]`, HIGH RANGE: `[]`
//! EXECUTION: Some(Wasm), WASM-EXECUTION: Compiled, CHAIN: Some("xxnetwork-dev"), DB CACHE: 128

// Executed Command:
// target/release/xxnetwork-chain
// benchmark
// --chain=xxnetwork-dev
// --steps=50
// --repeat=20
// --pallet=xx-team-custody
// --extrinsic=*
// --execution=wasm
// --wasm-execution=compiled
// --heap-pages=4096
// --output=./xx-team-custody/src/weights.rs
// --template=./scripts/frame-weight-template.hbs


#![cfg_attr(rustfmt, rustfmt_skip)]
#![allow(unused_parens)]
#![allow(unused_imports)]

use frame_support::{traits::Get, weights::{Weight, constants::RocksDbWeight}};
use sp_std::marker::PhantomData;

/// Weight functions needed for xx_team_custody.
pub trait WeightInfo {
	fn payout() -> Weight;
	fn custody_bond() -> Weight;
	fn custody_bond_extra() -> Weight;
	fn custody_set_controller() -> Weight;
	fn custody_set_proxy() -> Weight;
	fn team_custody_set_proxy() -> Weight;
	fn add_custodian() -> Weight;
	fn remove_custodian() -> Weight;
	fn replace_team_member() -> Weight;
}

/// Weights for xx_team_custody using the Substrate node and recommended hardware.
pub struct SubstrateWeight<T>(PhantomData<T>);
impl<T: frame_system::Config> WeightInfo for SubstrateWeight<T> {
	// Storage: System Account (r:3 w:3)
	// Storage: XXCustody TotalCustody (r:1 w:1)
	// Storage: XXCustody TeamAccounts (r:1 w:1)
	fn payout() -> Weight {
		Weight::from_parts(127_699_000, 1000)
			.saturating_add(T::DbWeight::get().reads(5 as u64))
			.saturating_add(T::DbWeight::get().writes(5 as u64))
	}
	// Storage: System Account (r:1 w:1)
	// Storage: Staking HistoryDepth (r:1 w:0)
	// Storage: Staking Ledger (r:1 w:1)
	// Storage: XXCustody Custodians (r:1 w:0)
	// Storage: Staking Bonded (r:1 w:1)
	// Storage: Staking CurrentEra (r:1 w:0)
	// Storage: XXCustody CustodyAccounts (r:1 w:0)
	// Storage: Balances Locks (r:1 w:1)
	fn custody_bond() -> Weight {
		Weight::from_parts(94_786_000, 1000)
			.saturating_add(T::DbWeight::get().reads(8 as u64))
			.saturating_add(T::DbWeight::get().writes(4 as u64))
	}
	// Storage: Balances Locks (r:1 w:1)
	// Storage: XXCustody Custodians (r:1 w:0)
	// Storage: XXCustody CustodyAccounts (r:1 w:0)
	// Storage: Staking Bonded (r:1 w:0)
	// Storage: Staking Ledger (r:1 w:1)
	// Storage: System Account (r:1 w:1)
	fn custody_bond_extra() -> Weight {
		Weight::from_parts(77_928_000, 1000)
			.saturating_add(T::DbWeight::get().reads(6 as u64))
			.saturating_add(T::DbWeight::get().writes(3 as u64))
	}
	// Storage: Staking Bonded (r:1 w:1)
	// Storage: XXCustody Custodians (r:1 w:0)
	// Storage: Staking Ledger (r:2 w:2)
	// Storage: XXCustody CustodyAccounts (r:1 w:0)
	fn custody_set_controller() -> Weight {
		Weight::from_parts(45_799_000, 1000)
			.saturating_add(T::DbWeight::get().reads(5 as u64))
			.saturating_add(T::DbWeight::get().writes(3 as u64))
	}
	// Storage: System Account (r:1 w:1)
	// Storage: Proxy Proxies (r:1 w:1)
	// Storage: XXCustody CustodyAccounts (r:1 w:0)
	// Storage: XXCustody Custodians (r:1 w:0)
	fn custody_set_proxy() -> Weight {
		Weight::from_parts(54_788_000, 1000)
			.saturating_add(T::DbWeight::get().reads(4 as u64))
			.saturating_add(T::DbWeight::get().writes(2 as u64))
	}
	// Storage: Proxy Proxies (r:1 w:1)
	// Storage: System Account (r:2 w:2)
	// Storage: XXCustody TeamAccounts (r:1 w:1)
	fn team_custody_set_proxy() -> Weight {
		Weight::from_parts(89_382_000, 1000)
			.saturating_add(T::DbWeight::get().reads(4 as u64))
			.saturating_add(T::DbWeight::get().writes(4 as u64))
	}
	// Storage: XXCustody Custodians (r:0 w:1)
	fn add_custodian() -> Weight {
		Weight::from_parts(20_959_000, 1000)
			.saturating_add(T::DbWeight::get().writes(1 as u64))
	}
	// Storage: XXCustody Custodians (r:0 w:1)
	fn remove_custodian() -> Weight {
		Weight::from_parts(21_083_000, 1000)
			.saturating_add(T::DbWeight::get().writes(1 as u64))
	}
	// Storage: XXCustody TeamAccounts (r:2 w:2)
	fn replace_team_member() -> Weight {
		Weight::from_parts(36_760_000, 1000)
			.saturating_add(T::DbWeight::get().reads(2 as u64))
			.saturating_add(T::DbWeight::get().writes(2 as u64))
	}
}

// For backwards compatibility and tests
impl WeightInfo for () {
	// Storage: System Account (r:3 w:3)
	// Storage: XXCustody TotalCustody (r:1 w:1)
	// Storage: XXCustody TeamAccounts (r:1 w:1)
	fn payout() -> Weight {
		Weight::from_parts(127_699_000, 1000)
			.saturating_add(RocksDbWeight::get().reads(5 as u64))
			.saturating_add(RocksDbWeight::get().writes(5 as u64))
	}
	// Storage: System Account (r:1 w:1)
	// Storage: Staking HistoryDepth (r:1 w:0)
	// Storage: Staking Ledger (r:1 w:1)
	// Storage: XXCustody Custodians (r:1 w:0)
	// Storage: Staking Bonded (r:1 w:1)
	// Storage: Staking CurrentEra (r:1 w:0)
	// Storage: XXCustody CustodyAccounts (r:1 w:0)
	// Storage: Balances Locks (r:1 w:1)
	fn custody_bond() -> Weight {
		Weight::from_parts(94_786_000, 1000)
			.saturating_add(RocksDbWeight::get().reads(8 as u64))
			.saturating_add(RocksDbWeight::get().writes(4 as u64))
	}
	// Storage: Balances Locks (r:1 w:1)
	// Storage: XXCustody Custodians (r:1 w:0)
	// Storage: XXCustody CustodyAccounts (r:1 w:0)
	// Storage: Staking Bonded (r:1 w:0)
	// Storage: Staking Ledger (r:1 w:1)
	// Storage: System Account (r:1 w:1)
	fn custody_bond_extra() -> Weight {
		Weight::from_parts(77_928_000, 1000)
			.saturating_add(RocksDbWeight::get().reads(6 as u64))
			.saturating_add(RocksDbWeight::get().writes(3 as u64))
	}
	// Storage: Staking Bonded (r:1 w:1)
	// Storage: XXCustody Custodians (r:1 w:0)
	// Storage: Staking Ledger (r:2 w:2)
	// Storage: XXCustody CustodyAccounts (r:1 w:0)
	fn custody_set_controller() -> Weight {
		Weight::from_parts(45_799_000, 1000)
			.saturating_add(RocksDbWeight::get().reads(5 as u64))
			.saturating_add(RocksDbWeight::get().writes(3 as u64))
	}
	// Storage: System Account (r:1 w:1)
	// Storage: Proxy Proxies (r:1 w:1)
	// Storage: XXCustody CustodyAccounts (r:1 w:0)
	// Storage: XXCustody Custodians (r:1 w:0)
	fn custody_set_proxy() -> Weight {
		Weight::from_parts(54_788_000, 1000)
			.saturating_add(RocksDbWeight::get().reads(4 as u64))
			.saturating_add(RocksDbWeight::get().writes(2 as u64))
	}
	// Storage: Proxy Proxies (r:1 w:1)
	// Storage: System Account (r:2 w:2)
	// Storage: XXCustody TeamAccounts (r:1 w:1)
	fn team_custody_set_proxy() -> Weight {
		Weight::from_parts(89_382_000, 1000)
			.saturating_add(RocksDbWeight::get().reads(4 as u64))
			.saturating_add(RocksDbWeight::get().writes(4 as u64))
	}
	// Storage: XXCustody Custodians (r:0 w:1)
	fn add_custodian() -> Weight {
		Weight::from_parts(20_959_000, 1000)
			.saturating_add(RocksDbWeight::get().writes(1 as u64))
	}
	// Storage: XXCustody Custodians (r:0 w:1)
	fn remove_custodian() -> Weight {
		Weight::from_parts(21_083_000, 1000)
			.saturating_add(RocksDbWeight::get().writes(1 as u64))
	}
	// Storage: XXCustody TeamAccounts (r:2 w:2)
	fn replace_team_member() -> Weight {
		Weight::from_parts(36_760_000, 1000)
			.saturating_add(RocksDbWeight::get().reads(2 as u64))
			.saturating_add(RocksDbWeight::get().writes(2 as u64))
	}
}
