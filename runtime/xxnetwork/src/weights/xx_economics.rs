
//! Autogenerated weights for `xx_economics`
//!
//! THIS FILE WAS AUTO-GENERATED USING THE SUBSTRATE BENCHMARK CLI VERSION 4.0.0-dev
//! DATE: 2023-03-24, STEPS: `50`, REPEAT: `20`, LOW RANGE: `[]`, HIGH RANGE: `[]`
//! WORST CASE MAP SIZE: `1000000`
//! HOSTNAME: `workstation`, CPU: `AMD Ryzen 9 5900X 12-Core Processor`
//! EXECUTION: Some(Wasm), WASM-EXECUTION: Compiled, CHAIN: Some("dev"), DB CACHE: 1024

// Executed Command:
// ./target/production/xxnetwork-chain
// benchmark
// pallet
// --chain=dev
// --steps=50
// --repeat=20
// --pallet=xx_economics
// --extrinsic=*
// --execution=wasm
// --wasm-execution=compiled
// --heap-pages=4096
// --output=./weights/xx_economics.rs

#![cfg_attr(rustfmt, rustfmt_skip)]
#![allow(unused_parens)]
#![allow(unused_imports)]

use frame_support::{traits::Get, weights::Weight};
use sp_std::marker::PhantomData;

/// Weight functions for `xx_economics`.
pub struct WeightInfo<T>(PhantomData<T>);
impl<T: frame_system::Config> xx_economics::WeightInfo for WeightInfo<T> {
	/// Storage: XXEconomics InflationParams (r:0 w:1)
	/// Proof Skipped: XXEconomics InflationParams (max_values: Some(1), max_size: None, mode: Measured)
	fn set_inflation_params() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `0`
		//  Estimated: `0`
		// Minimum execution time: 6_272_000 picoseconds.
		Weight::from_parts(6_563_000, 0)
			.saturating_add(Weight::from_parts(0, 0))
			.saturating_add(T::DbWeight::get().writes(1))
	}
	/// Storage: XXEconomics InterestPoints (r:0 w:1)
	/// Proof Skipped: XXEconomics InterestPoints (max_values: Some(1), max_size: None, mode: Measured)
	fn set_interest_points() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `0`
		//  Estimated: `0`
		// Minimum execution time: 6_212_000 picoseconds.
		Weight::from_parts(6_412_000, 0)
			.saturating_add(Weight::from_parts(0, 0))
			.saturating_add(T::DbWeight::get().writes(1))
	}
	/// Storage: XXEconomics IdealLiquidityStake (r:0 w:1)
	/// Proof Skipped: XXEconomics IdealLiquidityStake (max_values: Some(1), max_size: None, mode: Measured)
	fn set_liquidity_rewards_stake() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `0`
		//  Estimated: `0`
		// Minimum execution time: 6_141_000 picoseconds.
		Weight::from_parts(6_382_000, 0)
			.saturating_add(Weight::from_parts(0, 0))
			.saturating_add(T::DbWeight::get().writes(1))
	}
	/// Storage: XXEconomics LiquidityRewards (r:0 w:1)
	/// Proof Skipped: XXEconomics LiquidityRewards (max_values: Some(1), max_size: None, mode: Measured)
	fn set_liquidity_rewards_balance() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `0`
		//  Estimated: `0`
		// Minimum execution time: 6_122_000 picoseconds.
		Weight::from_parts(6_322_000, 0)
			.saturating_add(Weight::from_parts(0, 0))
			.saturating_add(T::DbWeight::get().writes(1))
	}
}
