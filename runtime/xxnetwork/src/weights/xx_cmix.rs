
//! Autogenerated weights for `xx_cmix`
//!
//! THIS FILE WAS AUTO-GENERATED USING THE SUBSTRATE BENCHMARK CLI VERSION 4.0.0-dev
//! DATE: 2023-03-24, STEPS: `50`, REPEAT: `20`, LOW RANGE: `[]`, HIGH RANGE: `[]`
//! WORST CASE MAP SIZE: `1000000`
//! HOSTNAME: `workstation`, CPU: `AMD Ryzen 9 5900X 12-Core Processor`
//! EXECUTION: Some(Wasm), WASM-EXECUTION: Compiled, CHAIN: Some("dev"), DB CACHE: 1024

// Executed Command:
// ./target/production/xxnetwork-chain
// benchmark
// pallet
// --chain=dev
// --steps=50
// --repeat=20
// --pallet=xx_cmix
// --extrinsic=*
// --execution=wasm
// --wasm-execution=compiled
// --heap-pages=4096
// --output=./weights/xx_cmix.rs

#![cfg_attr(rustfmt, rustfmt_skip)]
#![allow(unused_parens)]
#![allow(unused_imports)]

use frame_support::{traits::Get, weights::Weight};
use sp_std::marker::PhantomData;

/// Weight functions for `xx_cmix`.
pub struct WeightInfo<T>(PhantomData<T>);
impl<T: frame_system::Config> xx_cmix::WeightInfo for WeightInfo<T> {
	/// Storage: XXCmix AdminPermission (r:1 w:0)
	/// Proof Skipped: XXCmix AdminPermission (max_values: Some(1), max_size: None, mode: Measured)
	/// Storage: XXCmix CmixHashes (r:0 w:1)
	/// Proof Skipped: XXCmix CmixHashes (max_values: Some(1), max_size: None, mode: Measured)
	fn set_cmix_hashes() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `227`
		//  Estimated: `1939`
		// Minimum execution time: 12_483_000 picoseconds.
		Weight::from_parts(12_754_000, 0)
			.saturating_add(Weight::from_parts(0, 1939))
			.saturating_add(T::DbWeight::get().reads(1))
			.saturating_add(T::DbWeight::get().writes(1))
	}
	/// Storage: XXCmix SchedulingAccount (r:0 w:1)
	/// Proof Skipped: XXCmix SchedulingAccount (max_values: Some(1), max_size: None, mode: Measured)
	fn set_scheduling_account() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `0`
		//  Estimated: `0`
		// Minimum execution time: 6_993_000 picoseconds.
		Weight::from_parts(7_244_000, 0)
			.saturating_add(Weight::from_parts(0, 0))
			.saturating_add(T::DbWeight::get().writes(1))
	}
	/// Storage: XXCmix NextCmixVariables (r:0 w:1)
	/// Proof Skipped: XXCmix NextCmixVariables (max_values: Some(1), max_size: None, mode: Measured)
	fn set_next_cmix_variables() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `0`
		//  Estimated: `0`
		// Minimum execution time: 3_897_000 picoseconds.
		Weight::from_parts(4_038_000, 0)
			.saturating_add(Weight::from_parts(0, 0))
			.saturating_add(T::DbWeight::get().writes(1))
	}
	/// Storage: XXCmix SchedulingAccount (r:1 w:0)
	/// Proof Skipped: XXCmix SchedulingAccount (max_values: Some(1), max_size: None, mode: Measured)
	/// Storage: Staking ActiveEra (r:1 w:0)
	/// Proof: Staking ActiveEra (max_values: Some(1), max_size: Some(13), added: 508, mode: MaxEncodedLen)
	/// Storage: Staking ErasRewardPoints (r:1 w:1)
	/// Proof Skipped: Staking ErasRewardPoints (max_values: None, max_size: None, mode: Measured)
	/// The range of component `n` is `[1, 99]`.
	fn submit_cmix_points(n: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `897`
		//  Estimated: `8242`
		// Minimum execution time: 18_635_000 picoseconds.
		Weight::from_parts(19_112_327, 0)
			.saturating_add(Weight::from_parts(0, 8242))
			// Standard Error: 697
			.saturating_add(Weight::from_parts(109_836, 0).saturating_mul(n.into()))
			.saturating_add(T::DbWeight::get().reads(3))
			.saturating_add(T::DbWeight::get().writes(1))
	}
	/// Storage: XXCmix SchedulingAccount (r:1 w:0)
	/// Proof Skipped: XXCmix SchedulingAccount (max_values: Some(1), max_size: None, mode: Measured)
	/// Storage: Staking ActiveEra (r:1 w:0)
	/// Proof: Staking ActiveEra (max_values: Some(1), max_size: Some(13), added: 508, mode: MaxEncodedLen)
	/// Storage: Staking ErasRewardPoints (r:1 w:1)
	/// Proof Skipped: Staking ErasRewardPoints (max_values: None, max_size: None, mode: Measured)
	/// The range of component `n` is `[1, 99]`.
	fn submit_cmix_deductions(n: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `897`
		//  Estimated: `8242`
		// Minimum execution time: 18_244_000 picoseconds.
		Weight::from_parts(19_049_581, 0)
			.saturating_add(Weight::from_parts(0, 8242))
			// Standard Error: 514
			.saturating_add(Weight::from_parts(111_213, 0).saturating_mul(n.into()))
			.saturating_add(T::DbWeight::get().reads(3))
			.saturating_add(T::DbWeight::get().writes(1))
	}
	/// Storage: XXCmix SchedulingAccount (r:1 w:0)
	/// Proof Skipped: XXCmix SchedulingAccount (max_values: Some(1), max_size: None, mode: Measured)
	/// Storage: XXCmix CmixAddressSpace (r:0 w:1)
	/// Proof Skipped: XXCmix CmixAddressSpace (max_values: Some(1), max_size: None, mode: Measured)
	fn set_cmix_address_space() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `245`
		//  Estimated: `1975`
		// Minimum execution time: 10_860_000 picoseconds.
		Weight::from_parts(11_221_000, 0)
			.saturating_add(Weight::from_parts(0, 1975))
			.saturating_add(T::DbWeight::get().reads(1))
			.saturating_add(T::DbWeight::get().writes(1))
	}
	/// Storage: XXCmix AdminPermission (r:0 w:1)
	/// Proof Skipped: XXCmix AdminPermission (max_values: Some(1), max_size: None, mode: Measured)
	fn set_admin_permission() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `0`
		//  Estimated: `0`
		// Minimum execution time: 6_572_000 picoseconds.
		Weight::from_parts(6_943_000, 0)
			.saturating_add(Weight::from_parts(0, 0))
			.saturating_add(T::DbWeight::get().writes(1))
	}
}
